<?xml version="1.0" encoding="UTF-8"?>
<documentation include-internal-symbols-p="yes" index-title="Sphinx Search API reference" css="index.css" heading="Common Lisp Sphinx Search API"><package name="cl-sphinx-search" id="cl-sphinx-search"><documentation-string>This package provides an interface to the search daemon (<em>searchd</em>)    for <a a="http://www.sphinxsearch.com/">Sphinx</a>.<break/>    <section section="About Sphinx"><break/>
    From the site:<break/>    <pre>
    Sphinx is a full-text search engine, distributed under GPL version 2.
    Commercial license is also available for embedded use.<break/>
    Generally, it's a standalone search engine, meant to provide fast,
    size-efficient and relevant fulltext search functions to other applications.
    Sphinx was specially designed to integrate well with SQL databases and
    scripting languages. Currently built-in data sources support fetching data
    either via direct connection to MySQL or PostgreSQL, or using XML pipe
    mechanism (a pipe to indexer in special XML-based format which Sphinx
    recognizes).<break/>
    As for the name, Sphinx is an acronym which is officially decoded as
    SQL Phrase Index. Yes, I know about CMU's Sphinx project.    </pre>    </section><break/>    <section section="Synopsis">    <pre><break/>
    (let ((sph (make-instance 'sphinx-client)))
      (add-query sph "test")
      (run-queries sph))<break/>    </pre>    </section><break/>    <section section="One class">
    There is just one class:<break/>    <aboutclass>sphinx-client</aboutclass>    </section><break/>    <section section="Methods">
    Setting options/parameters:<break/>    <aboutfun>set-server</aboutfun>    <aboutfun>set-limits</aboutfun><break/>
    Running queries:<break/>    <aboutfun>query</aboutfun>    <aboutfun>add-query</aboutfun>    <aboutfun>run-queries</aboutfun><break/>    </section><break/>    <section section="Acknowledgements">
    This port is based on Sphinx.pm version 0.22 (deployed to CPAN    <a a="http://search.cpan.org/~jjschutz/Sphinx-Search-0.22/">here</a>), which
    itself says:<break/>    <pre>
    This module is based on Sphinx.pm (not deployed to CPAN) for
    Sphinx version 0.9.7-rc1, by Len Kranendonk, which was in turn
    based on the Sphinx PHP API.    </pre><break/>
    Also used was the api for python which was supplied with the source code    download for Sphinx Search v0.9.9-rc2, in the <code>api/</code> directory.<break/>    <b>Documentation</b><break/>    This documentation was generated by <a a="http://www.lichteblau.com/atdoc/doc/">atdoc</a>,
    the documentation generation system written by David Lichteblau.<break/>    </section><break/></documentation-string><external-symbols><function-definition id="cl-sphinx-search__fun__set-limits" name="set-limits" package="cl-sphinx-search"><lambda-list><elt>client</elt><elt>&amp;key</elt><elt>offset</elt><elt>limit</elt><elt>max</elt><elt>cutoff</elt></lambda-list><documentation-string><arg arg="client">a <class id="cl-sphinx-search__class__sphinx-client">sphinx-client</class></arg>    <arg arg="offset">the offset to start returning matches from</arg>    <arg arg="limit">how many matches to return starting from <code>offset</code></arg>    <arg arg="max">maximum number of matches to return</arg>    <arg arg="cutoff">the cutoff to stop searching at</arg>    <return>client</return>    <short>Set the offset, limit, cutoff and max matches to return.</short><break/>    <pre>
    (set-limits client :limit limit)
    (set-limits client :offset offset :limit limit)
    (set-limits client :offset offset :limit limit :max max-matches)    </pre><break/>
    Set limit of matches to return. Defaults to offset 0 and 1000 max matches.</documentation-string></function-definition><function-definition id="cl-sphinx-search__fun__last-warning" name="last-warning" package="cl-sphinx-search"><lambda-list><elt>client</elt></lambda-list><documentation-string><arg arg="client">a <class id="cl-sphinx-search__class__sphinx-client">sphinx-client</class></arg>    <return>a string; the last warning message returned from the <code>searchd</code></return><break/>
    Get the last warning message sent by searchd</documentation-string></function-definition><function-definition id="cl-sphinx-search__fun__set-server" name="set-server" package="cl-sphinx-search"><lambda-list><elt>client</elt><elt>&amp;key</elt><elt>host</elt><elt>port</elt><elt>path</elt></lambda-list><documentation-string><arg arg="client">a <class id="cl-sphinx-search__class__sphinx-client">sphinx-client</class></arg>    <arg arg="host">the host to connect to when using an INET socket</arg>    <arg arg="port">the port to connect to when using an INET socket</arg>    <arg arg="path">the path to the unix domain socket when not using INET</arg>    <return>client</return>    <short>Set the server host:port or path to connect to.</short><break/>    <pre>
    (set-server client :host host :port port)
    (set-server client :path unix-path)    </pre><break/>    In the first form, sets the <code>host</code> (string) and <code>port</code> (integer)
    details for the searchd server using a network (INET) socket.<break/>    In the second form, where <code>unix-path</code> is a local filesystem path
    (optionally prefixed by 'unix://'), sets the client to access the
    searchd server via a local (UNIX domain) socket at the specified path.</documentation-string></function-definition><function-definition id="cl-sphinx-search__fun__add-query" name="add-query" package="cl-sphinx-search"><lambda-list><elt>client</elt><elt>query</elt><elt>&amp;key</elt><elt>index</elt><elt>comment</elt></lambda-list><documentation-string><arg arg="client">a <class id="cl-sphinx-search__class__sphinx-client">sphinx-client</class></arg>    <arg arg="query">the query to run through <code>searchd</code></arg>    <arg arg="index">the index to use; defaults to "*"</arg>    <arg arg="comment">a comment describing this query; default none</arg>    <return>length of query queue</return>    <short>Add a query to a batch request.</short><break/>    <pre>
    (add-query client "test")
    (add-query client "word" :index "*")
    (run-queries client)    </pre><break/>
    Add a query to the queue of batched queries.<break/>    Batch queries enable <code>searchd</code> to perform internal optimizations,
    if possible; and reduce network connection overhead in all cases.<break/>
    For instance, running exactly the same query with different    group-by settings will enable <code>searchd</code> to perform expensive
    full-text search and ranking operation only once, but compute
    multiple group-by results from its output.<break/>
    It returns the new length of the query queue, which is also the index
    of the newly added query in the queue.<break/>    <see id="cl-sphinx-search__fun__query">query</see>    <see id="cl-sphinx-search__fun__run-queries">run-queries</see><break/></documentation-string></function-definition><function-definition id="cl-sphinx-search__fun__query" name="query" package="cl-sphinx-search"><lambda-list><elt>client</elt><elt>query</elt><elt>&amp;key</elt><elt>index</elt><elt>comment</elt></lambda-list><documentation-string><arg arg="client">a <class id="cl-sphinx-search__class__sphinx-client">sphinx-client</class></arg>    <arg arg="query">the query to run through <code>searchd</code></arg>    <arg arg="index">the index to use; defaults to "*"</arg>    <arg arg="comment">a comment describing this query; default none</arg>    <return>nil or a hash containing the query results</return>    <short>Run a query through <code>searchd</code>.</short><break/>    <pre>
    (query client "test")    </pre><break/>    Query <code>searchd</code>. This method runs a single query through <code>searchd</code>.<break/>
    It returns the results in a hash with the following keys:    <dl>      <dt dt="attributes">a hash-table containing attributes</dt>      <dt dt="fields">a list of fields</dt>      <dt dt="matches">a hash-table containing the matches</dt>      <dt dt="status">the status returned by <code>searchd</code></dt>      <dt dt="status-message">the status message returned by <code>searchd</code></dt>      <dt dt="time">the time <code>searchd</code> took for the query</dt>      <dt dt="total">the total matches returned</dt>      <dt dt="total-found">the total number of matches found</dt>      <dt dt="words">a hash-table containing the matching words with their statistics</dt>    </dl><break/>    <see id="cl-sphinx-search__fun__add-query">add-query</see>    <see id="cl-sphinx-search__fun__run-queries">run-queries</see><break/></documentation-string></function-definition><function-definition id="cl-sphinx-search__fun__last-error" name="last-error" package="cl-sphinx-search"><lambda-list><elt>client</elt></lambda-list><documentation-string><arg arg="client">a <class id="cl-sphinx-search__class__sphinx-client">sphinx-client</class></arg>    <return>a string; the last error message returned from the <code>searchd</code></return><break/>
    Get the last error message sent by searchd</documentation-string></function-definition><function-definition id="cl-sphinx-search__fun__run-queries" name="run-queries" package="cl-sphinx-search"><lambda-list><elt>client</elt></lambda-list><documentation-string><arg arg="client">a <class id="cl-sphinx-search__class__sphinx-client">sphinx-client</class></arg>    <return>nil or a list of hashes</return>    <short>Run the queries added with <code>add-query</code> through <code>searchd</code>.</short><break/>    <pre>
    (add-query client "test")
    (add-query client "word")
    (run-queries client)    </pre><break/>    Query <code>searchd</code> with the collected queries added with <code>add-query</code>.<break/>
    It returns a list of hashes containing the result of each query. Each hash
    has the following keys:    <dl>      <dt dt="attributes">a hash-table containing attributes</dt>      <dt dt="fields">a list of fields</dt>      <dt dt="matches">a hash-table containing the matches</dt>      <dt dt="status">the status returned by <code>searchd</code></dt>      <dt dt="status-message">the status message returned by <code>searchd</code></dt>      <dt dt="time">the time <code>searchd</code> took for the query</dt>      <dt dt="total">the total matches returned</dt>      <dt dt="total-found">the total number of matches found</dt>      <dt dt="words">a hash-table containing the matching words with their statistics</dt>    </dl><break/>    <see id="cl-sphinx-search__fun__query">query</see>    <see id="cl-sphinx-search__fun__add-query">add-query</see><break/></documentation-string></function-definition></external-symbols><internal-symbols><function-definition id="cl-sphinx-search__fun___pack-filters" name="%pack-filters" package="cl-sphinx-search"><lambda-list><elt>filters</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-match-extended+" name="+sph-match-extended+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun___pack-overrides" name="%pack-overrides" package="cl-sphinx-search"><lambda-list><elt>overrides</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun___socket" name="%socket" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun___port" name="%port" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__sort-mode" name="sort-mode" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-sort-expr+" name="+sph-sort-expr+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__select" name="select" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-match-any+" name="+sph-match-any+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__group-by" name="group-by" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__group-function" name="group-function" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-attr-bool+" name="+sph-attr-bool+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun___get-response-status" name="%get-response-status" package="cl-sphinx-search"><lambda-list><elt>response</elt><elt>start</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__max-matches" name="max-matches" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><class-definition id="cl-sphinx-search__class__sphinx-client" name="sphinx-client" package="cl-sphinx-search"><cpl><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string><short>The sphinx-search class.</short><break/>    <pre>
    (let ((sph (make-instance 'sphinx-client :host "localhost" :port 3315)))
       (add-query sph "test")
       (run-queries sph))    </pre><break/>
    The interface to the search daemon goes through this class.<break/>
    Set options and settings of the search to be performed on an object
    of this class, and then have it perform one search by calling    <fun id="cl-sphinx-search__fun__query">query</fun>, or add a number of queries using <fun id="cl-sphinx-search__fun__add-query">add-query</fun> and    then calling <fun id="cl-sphinx-search__fun__run-queries">run-queries</fun>.<break/>
    Either get a result hash or a list of result hashes back, or an error    that can be retrieved with the <fun id="cl-sphinx-search__fun__last-error">last-error</fun> function.<break/>    <see id="cl-sphinx-search__fun__set-server">set-server</see>    <see id="cl-sphinx-search__fun__set-limits">set-limits</see>    <see id="cl-sphinx-search__fun__last-warning">last-warning</see></documentation-string></class-definition><function-definition id="cl-sphinx-search__fun___host" name="%host" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun___pack-float" name="%pack-float" package="cl-sphinx-search"><lambda-list><elt>float-value</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+searchd-command-keywords+" name="+searchd-command-keywords+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-sort-attr-asc+" name="+sph-sort-attr-asc+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-sort-time-segments+" name="+sph-sort-time-segments+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun___encoding" name="%encoding" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-groupby-week+" name="+sph-groupby-week+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-filter-values+" name="+sph-filter-values+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-groupby-year+" name="+sph-groupby-year+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-attr-float+" name="+sph-attr-float+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-sort-attr-desc+" name="+sph-sort-attr-desc+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+searchd-command-excerpt+" name="+searchd-command-excerpt+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun___pack-hash" name="%pack-hash" package="cl-sphinx-search"><lambda-list><elt>hash-table</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__group-sort" name="group-sort" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-rank-bm25+" name="+sph-rank-bm25+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-match-all+" name="+sph-match-all+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-attr-bigint+" name="+sph-attr-bigint+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__anchor" name="anchor" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-rank-proximity-bm25+" name="+sph-rank-proximity-bm25+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+searchd-ok+" name="+searchd-ok+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-attr-ordinal+" name="+sph-attr-ordinal+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__retry-count" name="retry-count" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__cutoff" name="cutoff" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__retry-delay" name="retry-delay" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+searchd-command-update+" name="+searchd-command-update+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-attr-integer+" name="+sph-attr-integer+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__max-id" name="max-id" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun___send" name="%send" package="cl-sphinx-search"><lambda-list><elt>client</elt><elt>data</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-attr-types+" name="+sph-attr-types+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun___get-fields" name="%get-fields" package="cl-sphinx-search"><lambda-list><elt>response</elt><elt>start</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__max-query-time" name="max-query-time" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+searchd-retry+" name="+searchd-retry+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-attr-none+" name="+sph-attr-none+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-attr-timestamp+" name="+sph-attr-timestamp+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__min-id" name="min-id" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun___parse-response" name="%parse-response" package="cl-sphinx-search"><lambda-list><elt>response</elt><elt>n-requests</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun___read-from" name="%read-from" package="cl-sphinx-search"><lambda-list><elt>client</elt><elt>size</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+searchd-warning+" name="+searchd-warning+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+ver-command-excerpt+" name="+ver-command-excerpt+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-match-boolean+" name="+sph-match-boolean+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-match-phrase+" name="+sph-match-phrase+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__status" name="status" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-groupby-day+" name="+sph-groupby-day+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun___path" name="%path" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__field-weights" name="field-weights" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__filters" name="filters" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+ver-command-update+" name="+ver-command-update+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__group-distinct" name="group-distinct" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-rank-none+" name="+sph-rank-none+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__limit" name="limit" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__mode" name="mode" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-groupby-attr+" name="+sph-groupby-attr+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-groupby-month+" name="+sph-groupby-month+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun___get-matches" name="%get-matches" package="cl-sphinx-search"><lambda-list><elt>response</elt><elt>attribute-names</elt><elt>attributes</elt><elt>start</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable___response-length_" name="*response-length*" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+ver-command-search+" name="+ver-command-search+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun___get-attributes" name="%get-attributes" package="cl-sphinx-search"><lambda-list><elt>response</elt><elt>start</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__offset" name="offset" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun___pack-array-signed-quads" name="%pack-array-signed-quads" package="cl-sphinx-search"><lambda-list><elt>values-list</elt></lambda-list></function-definition><macro-definition id="cl-sphinx-search__fun__define-constant" name="define-constant" package="cl-sphinx-search"><lambda-list><elt>name</elt><elt>value</elt><elt>&amp;optional</elt><elt>doc</elt></lambda-list></macro-definition><function-definition id="cl-sphinx-search__fun__overrides" name="overrides" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun___get-response" name="%get-response" package="cl-sphinx-search"><lambda-list><elt>client</elt><elt>&amp;key</elt><elt>client-version</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+ver-command-keywords+" name="+ver-command-keywords+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-match-extended2+" name="+sph-match-extended2+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__sort-by" name="sort-by" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-filter-floatrange+" name="+sph-filter-floatrange+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun___connect" name="%connect" package="cl-sphinx-search"><lambda-list><elt>client</elt></lambda-list></function-definition><variable-definition id="cl-sphinx-search__variable__+sph-rank-wordcount+" name="+sph-rank-wordcount+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-groupby-attrpair+" name="+sph-groupby-attrpair+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__reqs" name="reqs" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__weights" name="weights" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="cl-sphinx-search__fun__ranker" name="ranker" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition><macro-definition id="cl-sphinx-search__fun__adv-p" name="adv-p" package="cl-sphinx-search"><lambda-list><elt>n</elt></lambda-list></macro-definition><variable-definition id="cl-sphinx-search__variable__+sph-attr-multi+" name="+sph-attr-multi+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+searchd-command-persist+" name="+searchd-command-persist+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-match-fullscan+" name="+sph-match-fullscan+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-sort-extended+" name="+sph-sort-extended+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+searchd-command-search+" name="+searchd-command-search+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-filter-range+" name="+sph-filter-range+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+searchd-error+" name="+searchd-error+" package="cl-sphinx-search"/><variable-definition id="cl-sphinx-search__variable__+sph-sort-relevance+" name="+sph-sort-relevance+" package="cl-sphinx-search"/><function-definition id="cl-sphinx-search__fun__index-weights" name="index-weights" package="cl-sphinx-search"><lambda-list><elt>object</elt></lambda-list></function-definition></internal-symbols></package></documentation>